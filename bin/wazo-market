#!/usr/bin/env python3

import json
import logging
import os
import re
import shutil
import sys
import tempfile
import yaml

from git import Repo

log_level = os.environ.get('LOG_LEVEL', 'INFO')
logging.basicConfig(level=log_level)
logger = logging.getLogger()


class Plugin:
    def __init__(self, namespace, name, url):
        del namespace
        self.name = name
        self.url = url

    def tag_filter(self, tag_name):
        return True


class WazoPlugin:
    def __init__(self, name):
        self.name = name
        self.url = 'https://github.com/wazo-pbx/{name}'.format(name=name)
        self.tag_filter = re.compile(r'^v[0-9.]+-[0-9.]+$').match


repos_path = tempfile.mkdtemp()
plugin_defs = [
    WazoPlugin('wazo-admin-ui-user'),
    WazoPlugin('wazo-admin-ui-schedule'),
    WazoPlugin('wazo-admin-ui-sound'),
    WazoPlugin('wazo-admin-ui-line'),
    WazoPlugin('wazo-admin-ui-funckey'),
    WazoPlugin('wazo-admin-ui-group'),
    WazoPlugin('wazo-admin-ui-conference'),
    WazoPlugin('wazo-admin-ui-parking-lot'),
    WazoPlugin('wazo-admin-ui-switchboard'),
    WazoPlugin('wazo-admin-ui-voicemail'),
    WazoPlugin('wazo-admin-ui-cdr'),
    WazoPlugin('wazo-admin-ui-incall'),
    WazoPlugin('wazo-admin-ui-outcall'),
    WazoPlugin('wazo-admin-ui-paging'),
    WazoPlugin('wazo-admin-ui-moh'),
    WazoPlugin('wazo-admin-ui-trunk'),
    WazoPlugin('wazo-admin-ui-extension'),
    WazoPlugin('wazo-admin-ui-context'),
    WazoPlugin('wazo-admin-ui-ivr'),
    WazoPlugin('wazo-admin-ui-device'),
    WazoPlugin('wazo-admin-ui-webhook'),
    Plugin('incrediblepbx', 'firewall',
           'https://github.com/sboily/incrediblepbx-firewall'),
    Plugin('incrediblepbx', 'pbxstatus',
           'https://github.com/sboily/incrediblepbx-pbxstatus'),
    Plugin('incrediblepbx', 'moh',
           'https://github.com/sboily/incrediblepbx-moh'),
    Plugin('sboily', 'confgend-driver-followme',
           'https://github.com/sboily/wazo-confgend-driver-followme'),
    Plugin('sboily', 'confgend-driver-pjsip',
           'https://github.com/sboily/wazo-confgend-driver-pjsip'),
    Plugin('loway', 'queuemetrics',
           'https://github.com/sboily/wazo-plugind-queuemetrics-loway'),
    Plugin('official', 'ngrok',
           'https://github.com/sboily/wazo-plugind-ngrok'),
]

aggregate_root = {'items': []}
aggregate = aggregate_root['items']

for plugin_def in plugin_defs:
    logger.debug('Processing plugin %s', plugin_def.name)
    repo_path = os.path.join(repos_path, plugin_def.name)
    repo = Repo.clone_from(plugin_def.url, repo_path)
    repo_tags = [tag for tag in repo.tags if tag.tag and plugin_def.tag_filter(tag.tag.tag)]
    if not repo_tags:
        continue
    last_tag = max(repo_tags, key=lambda tag: tag.tag.tag)
    try:
        metadata_blob = last_tag.commit.tree.join('wazo/plugin.yml')
    except KeyError:
        print('wazo/plugin.yml: file not found in {}:{}'.format(plugin_def.name, last_tag.tag.tag), file=sys.stderr)
    metadata = yaml.load(metadata_blob.data_stream.read())
    plugin = {}
    aggregate.append(plugin)
    plugin['name'] = metadata['name']
    plugin['namespace'] = metadata['namespace']
    plugin['display_name'] = metadata['display_name']
    plugin['author'] = metadata['author']
    plugin['tags'] = []
    plugin['homepage'] = plugin_def.url

    plugin['versions'] = []
    for tag in repo_tags:
        try:
            metadata_blob = tag.commit.tree.join('wazo/plugin.yml')
        except KeyError:
            print('wazo/plugin.yml: file not found in {}:{}'.format(plugin_def.name, tag.tag.tag), file=sys.stderr)
        metadata = yaml.load(metadata_blob.data_stream.read())
        metadata['tag_name'] = tag.name
        version = {
            'version': metadata['version'],
            'method': 'git',
            'options': {
                'ref': tag.tag.tag,
                'url': plugin_def.url,
            },
        }
        if metadata.get('min_wazo_version'):
            version['min_wazo_version'] = str(metadata['min_wazo_version'])
        plugin['versions'].append(version)

    plugin['versions'] = sorted(plugin['versions'], reverse=True, key=lambda version: version['version'])

print(json.dumps(aggregate_root, indent=4, sort_keys=True))

shutil.rmtree(repos_path)
